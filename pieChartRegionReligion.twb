<?xml version='1.0' encoding='utf-8' ?>

<!-- build 9100.15.1013.2200                                -->
<workbook source-platform='win' version='9.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <datasources>
    <datasource caption='Sheet1 (pop)' inline='true' name='excel-direct.42709.601264976853' version='9.1'>
      <connection class='excel-direct' cleaning='no' compat='no' dataRefreshTime='' filename='C:\Users\1\Desktop\mining\group\pop.xlsx' interpretationMode='0' password='' server='' username='' validate='no'>
        <relation name='Sheet1$' table='[Sheet1$]' type='table'>
          <columns gridOrigin='A4:F63:no:A4:F63' header='yes' outcome='6'>
            <column datatype='integer' name='id' ordinal='0' />
            <column datatype='string' name='Region' ordinal='1' />
            <column datatype='string' name='Religion' ordinal='2' />
            <column datatype='integer' name='Religion Num' ordinal='3' />
            <column datatype='real' name='Lat' ordinal='4' />
            <column datatype='real' name='Long' ordinal='5' />
          </columns>
        </relation>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>id</remote-name>
            <remote-type>20</remote-type>
            <local-name>[id]</local-name>
            <parent-name>[Sheet1$]</parent-name>
            <remote-alias>id</remote-alias>
            <ordinal>0</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Region</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Region]</local-name>
            <parent-name>[Sheet1$]</parent-name>
            <remote-alias>Region</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RGB_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Religion</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Religion]</local-name>
            <parent-name>[Sheet1$]</parent-name>
            <remote-alias>Religion</remote-alias>
            <ordinal>2</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RGB_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Religion Num</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Religion Num]</local-name>
            <parent-name>[Sheet1$]</parent-name>
            <remote-alias>Religion Num</remote-alias>
            <ordinal>3</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Lat</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Lat]</local-name>
            <parent-name>[Sheet1$]</parent-name>
            <remote-alias>Lat</remote-alias>
            <ordinal>4</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Long</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Long]</local-name>
            <parent-name>[Sheet1$]</parent-name>
            <remote-alias>Long</remote-alias>
            <ordinal>5</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[Sheet1$]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='context'>0</attribute>
              <attribute datatype='string' name='gridOrigin'>&quot;A4:F63:no:A4:F63&quot;</attribute>
              <attribute datatype='boolean' name='header'>true</attribute>
              <attribute datatype='integer' name='outcome'>6</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column aggregation='Avg' datatype='real' name='[Lat]' role='dimension' semantic-role='[Geographical].[Latitude]' type='quantitative' />
      <column aggregation='Avg' datatype='real' name='[Long]' role='dimension' semantic-role='[Geographical].[Longitude]' type='quantitative' />
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column datatype='string' name='[Region]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
      <column datatype='string' name='[Religion (group)]' role='dimension' type='nominal'>
        <calculation class='categorical-bin' column='[Religion]'>
          <bin value='&quot;Christianity&quot;'>
            <value>&quot;Christianity&quot;</value>
          </bin>
          <bin value='&quot;Islam&quot;'>
            <value>&quot;Islam&quot;</value>
          </bin>
          <bin value='&quot;No religion&quot;'>
            <value>&quot;No religion&quot;</value>
            <value>&quot;Other&quot;</value>
          </bin>
        </calculation>
      </column>
      <column datatype='integer' name='[Religion Num]' role='dimension' type='ordinal' />
      <column datatype='string' name='[Religion]' role='dimension' type='nominal' />
      <column caption='Id' datatype='integer' name='[id]' role='dimension' type='ordinal' />
      <column-instance column='[Region]' derivation='None' name='[none:Region:nk]' pivot='key' type='nominal' />
      <column-instance column='[Religion Num]' derivation='None' name='[none:Religion Num:ok]' pivot='key' type='ordinal' />
      <column-instance column='[Religion]' derivation='None' name='[none:Religion:nk]' pivot='key' type='nominal' />
      <group hidden='true' name='[Exclusions (Region,Religion,Religion (group),Religion Num)]' name-style='unqualified' user:auto-column='exclude'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[none:Region:nk]' />
          <groupfilter function='level-members' level='[none:Religion:nk]' />
          <groupfilter function='level-members' level='[Religion (group)]' />
          <groupfilter function='level-members' level='[none:Religion Num:ok]' />
        </groupfilter>
      </group>
      <group name='[Set 1]' name-style='unqualified' user:ui-builder='lasso-group'>
        <groupfilter function='except'>
          <groupfilter function='crossjoin'>
            <groupfilter function='level-members' level='[Region]' />
            <groupfilter function='level-members' level='[Religion]' />
            <groupfilter function='level-members' level='[Religion (group)]' />
            <groupfilter function='level-members' level='[Religion Num]' />
          </groupfilter>
          <groupfilter function='reorder-dimensionality'>
            <groupfilter function='crossjoin'>
              <groupfilter function='member' level='[Religion (group)]' member='&quot;Christianity&quot;' />
              <groupfilter function='crossjoin'>
                <groupfilter function='member' level='[Religion]' member='&quot;Christianity&quot;' />
                <groupfilter function='union'>
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[Region]' member='&quot;Ashanti&quot;' />
                    <groupfilter function='member' level='[Religion Num]' member='3719793' />
                  </groupfilter>
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[Region]' member='&quot;Brong-Ahafo&quot;' />
                    <groupfilter function='member' level='[Religion Num]' member='1670001' />
                  </groupfilter>
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[Region]' member='&quot;Central&quot;' />
                    <groupfilter function='member' level='[Religion Num]' member='1831768' />
                  </groupfilter>
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[Region]' member='&quot;Eastern&quot;' />
                    <groupfilter function='member' level='[Religion Num]' member='2223845' />
                  </groupfilter>
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[Region]' member='&quot;Greater Accra&quot;' />
                    <groupfilter function='member' level='[Religion Num]' member='3338294' />
                  </groupfilter>
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[Region]' member='&quot;Northern&quot;' />
                    <groupfilter function='member' level='[Religion Num]' member='521592' />
                  </groupfilter>
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[Region]' member='&quot;Upper East&quot;' />
                    <groupfilter function='member' level='[Religion Num]' member='436226' />
                  </groupfilter>
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[Region]' member='&quot;Upper West&quot;' />
                    <groupfilter function='member' level='[Religion Num]' member='310460' />
                  </groupfilter>
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[Region]' member='&quot;Volta&quot;' />
                    <groupfilter function='member' level='[Religion Num]' member='1542858' />
                  </groupfilter>
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[Region]' member='&quot;Western&quot;' />
                    <groupfilter function='member' level='[Religion Num]' member='1952000' />
                  </groupfilter>
                </groupfilter>
              </groupfilter>
            </groupfilter>
            <order>
              <hierarchy name='[Region]' />
              <hierarchy name='[Religion]' />
              <hierarchy name='[Religion (group)]' />
              <hierarchy name='[Religion Num]' />
            </order>
          </groupfilter>
        </groupfilter>
      </group>
      <group name='[Set 2]' name-style='unqualified' user:ui-builder='lasso-group'>
        <groupfilter function='except'>
          <groupfilter function='crossjoin'>
            <groupfilter function='level-members' level='[Region]' />
            <groupfilter function='level-members' level='[Religion]' />
            <groupfilter function='level-members' level='[Religion (group)]' />
            <groupfilter function='level-members' level='[Religion Num]' />
          </groupfilter>
          <groupfilter function='reorder-dimensionality'>
            <groupfilter function='crossjoin'>
              <groupfilter function='member' level='[Religion (group)]' member='&quot;No religion&quot;' />
              <groupfilter function='union'>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[Religion]' member='&quot;No religion&quot;' />
                  <groupfilter function='union'>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[Region]' member='&quot;Ashanti&quot;' />
                      <groupfilter function='member' level='[Religion Num]' member='259989' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[Region]' member='&quot;Brong-Ahafo&quot;' />
                      <groupfilter function='member' level='[Religion Num]' member='168839' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[Region]' member='&quot;Central&quot;' />
                      <groupfilter function='member' level='[Religion Num]' member='144892' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[Region]' member='&quot;Eastern&quot;' />
                      <groupfilter function='member' level='[Religion Num]' member='172381' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[Region]' member='&quot;Greater Accra&quot;' />
                      <groupfilter function='member' level='[Religion Num]' member='136711' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[Region]' member='&quot;Northern&quot;' />
                      <groupfilter function='member' level='[Religion Num]' member='65826' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[Region]' member='&quot;Upper East&quot;' />
                      <groupfilter function='member' level='[Religion Num]' member='29243' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[Region]' member='&quot;Upper West&quot;' />
                      <groupfilter function='member' level='[Religion Num]' member='24279' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[Region]' member='&quot;Volta&quot;' />
                      <groupfilter function='member' level='[Religion Num]' member='139688' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[Region]' member='&quot;Western&quot;' />
                      <groupfilter function='member' level='[Religion Num]' member='160229' />
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[Religion]' member='&quot;Other&quot;' />
                  <groupfilter function='union'>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[Region]' member='&quot;Ashanti&quot;' />
                      <groupfilter function='member' level='[Religion Num]' member='37172' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[Region]' member='&quot;Brong-Ahafo&quot;' />
                      <groupfilter function='member' level='[Religion Num]' member='15388' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[Region]' member='&quot;Central&quot;' />
                      <groupfilter function='member' level='[Religion Num]' member='20395' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[Region]' member='&quot;Eastern&quot;' />
                      <groupfilter function='member' level='[Religion Num]' member='24642' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[Region]' member='&quot;Greater Accra&quot;' />
                      <groupfilter function='member' level='[Religion Num]' member='38507' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[Region]' member='&quot;Northern&quot;' />
                      <groupfilter function='member' level='[Religion Num]' member='9350' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[Region]' member='&quot;Upper East&quot;' />
                      <groupfilter function='member' level='[Religion Num]' member='6080' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[Region]' member='&quot;Upper West&quot;' />
                      <groupfilter function='member' level='[Religion Num]' member='1966' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[Region]' member='&quot;Volta&quot;' />
                      <groupfilter function='member' level='[Religion Num]' member='16945' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[Region]' member='&quot;Western&quot;' />
                      <groupfilter function='member' level='[Religion Num]' member='23469' />
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[Religion]' member='&quot;Traditional&quot;' />
                  <groupfilter function='union'>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[Region]' member='&quot;Ashanti&quot;' />
                      <groupfilter function='member' level='[Religion Num]' member='34685' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[Region]' member='&quot;Brong-Ahafo&quot;' />
                      <groupfilter function='member' level='[Religion Num]' member='62847' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[Region]' member='&quot;Central&quot;' />
                      <groupfilter function='member' level='[Religion Num]' member='14089' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[Region]' member='&quot;Eastern&quot;' />
                      <groupfilter function='member' level='[Religion Num]' member='36707' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[Region]' member='&quot;Greater Accra&quot;' />
                      <groupfilter function='member' level='[Religion Num]' member='21045' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[Region]' member='&quot;Northern&quot;' />
                      <groupfilter function='member' level='[Religion Num]' member='395756' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[Region]' member='&quot;Upper East&quot;' />
                      <groupfilter function='member' level='[Religion Num]' member='291808' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[Region]' member='&quot;Upper West&quot;' />
                      <groupfilter function='member' level='[Religion Num]' member='97664' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[Region]' member='&quot;Volta&quot;' />
                      <groupfilter function='member' level='[Religion Num]' member='297699' />
                    </groupfilter>
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[Region]' member='&quot;Western&quot;' />
                      <groupfilter function='member' level='[Religion Num]' member='17972' />
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
              </groupfilter>
            </groupfilter>
            <order>
              <hierarchy name='[Region]' />
              <hierarchy name='[Religion]' />
              <hierarchy name='[Religion (group)]' />
              <hierarchy name='[Religion Num]' />
            </order>
          </groupfilter>
        </groupfilter>
      </group>
      <layout dim-ordering='alphabetic' dim-percentage='0.5' measure-ordering='alphabetic' measure-percentage='0.4' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='shape' type='shape' />
          <encoding attr='color' field='[Religion (group)]' type='palette'>
            <map to='#1f77b4'>
              <bucket>&quot;Islam&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;No religion&quot;</bucket>
            </map>
            <map to='#a2a2a2'>
              <bucket>&quot;Traditional&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;Christianity&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;Ghana&quot;' />
        <semantic-value key='[State].[Name]' value='%null%' />
      </semantic-values>
      <date-options start-of-week='monday' />
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Tableau' />
  </mapsources>
  <worksheets>
    <worksheet name='Sheet 1'>
      <table>
        <view>
          <datasources />
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
    </worksheet>
    <worksheet name='Sheet 2'>
      <table>
        <view>
          <datasources>
            <datasource caption='Sheet1 (pop)' name='excel-direct.42709.601264976853' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='excel-direct.42709.601264976853'>
            <column datatype='string' name='[Region]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
            <column datatype='string' name='[Religion (group)]' role='dimension' type='nominal'>
              <calculation class='categorical-bin' column='[Religion]'>
                <bin value='&quot;Christianity&quot;'>
                  <value>&quot;Christianity&quot;</value>
                </bin>
                <bin value='&quot;Islam&quot;'>
                  <value>&quot;Islam&quot;</value>
                </bin>
                <bin value='&quot;No religion&quot;'>
                  <value>&quot;No religion&quot;</value>
                  <value>&quot;Other&quot;</value>
                </bin>
              </calculation>
            </column>
            <column datatype='integer' name='[Religion Num]' role='dimension' type='ordinal' />
            <column datatype='string' name='[Religion]' role='dimension' type='nominal' />
            <column-instance column='[Religion Num]' derivation='Attribute' name='[attr:Religion Num:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Region]' derivation='None' name='[none:Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[Religion Num]' derivation='None' name='[none:Religion Num:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Religion]' derivation='None' name='[none:Religion:nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[excel-direct.42709.601264976853].[Exclusions (Region,Religion,Religion (group),Religion Num)]'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='crossjoin'>
                <groupfilter function='level-members' level='[none:Region:nk]' />
                <groupfilter function='level-members' level='[none:Religion:nk]' />
                <groupfilter function='level-members' level='[Religion (group)]' />
                <groupfilter function='level-members' level='[none:Religion Num:ok]' />
              </groupfilter>
              <groupfilter function='reorder-dimensionality'>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[Religion (group)]' member='&quot;No religion&quot;' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[none:Region:nk]' member='&quot;Eastern&quot;' />
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[none:Religion Num:ok]' member='172381' />
                      <groupfilter function='member' level='[none:Religion:nk]' member='&quot;No religion&quot;' />
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
                <order>
                  <hierarchy name='[none:Region:nk]' />
                  <hierarchy name='[none:Religion:nk]' />
                  <hierarchy name='[Religion (group)]' />
                  <hierarchy name='[none:Religion Num:ok]' />
                </order>
              </groupfilter>
            </groupfilter>
          </filter>
          <slices>
            <column>[excel-direct.42709.601264976853].[Exclusions (Region,Religion,Religion (group),Religion Num)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[excel-direct.42709.601264976853].[Latitude (generated)]' field-type='quantitative' max='1288200.4409323432' min='529820.26728559274' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
            <encoding attr='space' class='0' field='[excel-direct.42709.601264976853].[Longitude (generated)]' field-type='quantitative' max='629941.43088103202' min='-798195.94592884532' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.30000001192092896' />
            <format attr='map-style' value='' />
          </style-rule>
          <style-rule element='map-data-layer'>
            <format attr='palette' value='tableau-map-blue-green-light' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Pie' />
            <encodings>
              <color column='[excel-direct.42709.601264976853].[Religion (group)]' />
              <size column='[excel-direct.42709.601264976853].[attr:Religion Num:qk]' />
              <wedge-size column='[excel-direct.42709.601264976853].[attr:Religion Num:qk]' />
              <lod column='[excel-direct.42709.601264976853].[none:Region:nk]' />
              <lod column='[excel-direct.42709.601264976853].[none:Religion Num:ok]' />
              <text column='[excel-direct.42709.601264976853].[none:Religion:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='3.966850757598877' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[excel-direct.42709.601264976853].[Latitude (generated)]</rows>
        <cols>[excel-direct.42709.601264976853].[Longitude (generated)]</cols>
      </table>
    </worksheet>
  </worksheets>
  <dashboards>
    <dashboard name='Dashboard 1'>
      <style />
      <size maxheight='800' maxwidth='1000' minheight='800' minwidth='1000' />
      <zones />
    </dashboard>
  </dashboards>
  <windows>
    <window class='schema' source-height='-1' />
    <window auto-hidden='0' class='worksheet' maximized='0' name='Sheet 1'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
    </window>
    <window auto-hidden='0' class='worksheet' maximized='1' name='Sheet 2'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card pane-specification-id='0' param='[excel-direct.42709.601264976853].[attr:Religion Num:qk]' type='size' />
            <card pane-specification-id='0' param='[excel-direct.42709.601264976853].[Religion (group)]' type='color' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
        </edge>
      </cards>
      <highlight>
        <color-one-way>
          <field>[excel-direct.42709.601264976853].[Religion (group)]</field>
          <field>[excel-direct.42709.601264976853].[none:Region:nk]</field>
          <field>[excel-direct.42709.601264976853].[none:Religion:nk]</field>
          <field>[excel-direct.42709.601264976853].[none:id:ok]</field>
        </color-one-way>
      </highlight>
    </window>
    <window auto-hidden='0' class='dashboard' maximized='0' name='Dashboard 1' />
  </windows>
  <thumbnails>
    <thumbnail height='144' name='Sheet 1' width='174'>
      iVBORw0KGgoAAAANSUhEUgAAAK4AAACQCAYAAACRfFAzAAAACXBIWXMAAA7DAAAOwwHHb6hk
      AAABmUlEQVR4nO3SQQ0AIBDAMMC/58MDH7KkVbDH9szMgpjzOwBeGJck45JkXJKMS5JxSTIu
      ScYlybgkGZck45JkXJKMS5JxSTIuScYlybgkGZck45JkXJKMS5JxSTIuScYlybgkGZck45Jk
      XJKMS5JxSTIuScYlybgkGZck45JkXJKMS5JxSTIuScYlybgkGZck45JkXJKMS5JxSTIuScYl
      ybgkGZck45JkXJKMS5JxSTIuScYlybgkGZck45JkXJKMS5JxSTIuScYlybgkGZck45JkXJKM
      S5JxSTIuScYlybgkGZck45JkXJKMS5JxSTIuScYlybgkGZck45JkXJKMS5JxSTIuScYlybgk
      GZck45JkXJKMS5JxSTIuScYlybgkGZck45JkXJKMS5JxSTIuScYlybgkGZck45JkXJKMS5Jx
      STIuScYlybgkGZck45JkXJKMS5JxSTIuScYlybgkGZck45JkXJKMS5JxSTIuScYlybgkGZck
      45JkXJKMS5JxSTIuScYlybgkGZck45JkXJKMS5JxSTIuSRePYgUc7kJNEQAAAABJRU5ErkJg
      gg==
    </thumbnail>
    <thumbnail height='192' name='Sheet 2' width='192'>
      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
    </thumbnail>
  </thumbnails>
</workbook>
